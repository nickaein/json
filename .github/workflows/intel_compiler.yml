# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

name: build_all

on: 
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17768/w_BaseKit_p_2021.2.0.2871_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17762/w_HPCKit_p_2021.2.0.2901_offline.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17769/l_BaseKit_p_2021.2.0.2883_offline.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17764/l_HPCKit_p_2021.2.0.2997_offline.sh
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17643/m_HPCKit_p_2021.2.0.2903_offline.dmg
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  LINUX_CPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
  LINUX_DPCPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp
  LINUX_CPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler-pro
  LINUX_DPCPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler
  MACOS_CPP_COMPONENTS: intel.oneapi.mac.cpp-compiler

jobs:
  build_windows_cpp:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: cache install
      id: cache-install
      uses: actions/cache@v2
      with:
        path: C:\Program Files (x86)\Intel\oneAPI\compiler
        key: install-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_windows.sh') }}
    - name: install
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: .github/workflows/intel-scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_CPP_COMPONENTS
    - name: build_win_icx
      run: .github/workflows/intel-scripts/build_windows.bat build_win_icx
    - name: build_win_icl
      run: .github/workflows/intel-scripts/build_windows.bat build_win_icl
    - name: exclude unused files from cache
      if: steps.cache-install.outputs.cache-hit != 'true'
      shell: bash
      run: .github/workflows/intel-scripts/cache_exclude_windows.sh

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: steps.cache-install.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          extract.log
          bootstrapper*
          installer*
        retention-days: 7

  # build_windows_dpcpp:
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         C:\Program Files (x86)\Intel\oneAPI\compiler
  #         C:\Program Files (x86)\Intel\oneAPI\tbb
  #         C:\Windows\System32\OpenCL.dll
  #       key: install-${{ env.WINDOWS_BASEKIT_URL }}-${{ env.WINDOWS_DPCPP_COMPONENTS }}-compiler-tbb-opencl-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_windows.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_windows.bat $WINDOWS_BASEKIT_URL $WINDOWS_DPCPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_windows.bat dpc++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     shell: bash
  #     run: .github/workflows/intel-scripts/cache_exclude_windows.sh

  #   # Delete the following if you don't want to save install logs
  #   - name: Saving install logs
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: InstallLogs_${{ github.job }}
  #       path: |
  #         extract.log
  #         bootstrapper*
  #         installer*
  #       retention-days: 7

  build_linux_cpp:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: cache install
      id: cache-install
      uses: actions/cache@v2
      with:
        path: |
          /opt/intel/oneapi/compiler
        key: install-${{ env.LINUX_HPCKIT_URL }}-${{ env.LINUX_CPP_COMPONENTS_WEB }}-compiler-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
    - name: install
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: .github/workflows/intel-scripts/install_linux.sh $LINUX_HPCKIT_URL $LINUX_CPP_COMPONENTS_WEB
    - name: build_linux_icpx
      run: .github/workflows/intel-scripts/build_linux.sh build_linux_icpx
    - name: build_linux_icpc
      run: .github/workflows/intel-scripts/build_linux.sh build_linux_icpc
    - name: exclude unused files from cache
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: .github/workflows/intel-scripts/cache_exclude_linux.sh

    # Delete the following if you don't want to save install logs
    - name: Saving install logs
      if: steps.cache-install.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v2
      with:
        name: InstallLogs_${{ github.job }}
        path: |
          bootstrapper*
          installer*
        retention-days: 7

  # build_linux_dpcpp:
  #   runs-on: ubuntu-20.04
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         /opt/intel/oneapi/compiler
  #         /opt/intel/oneapi/tbb
  #       key: install-${{ env.LINUX_BASEKIT_URL }}-${{ env.LINUX_DPCPP_COMPONENTS_WEB }}-compiler-tbb-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_linux.sh $LINUX_BASEKIT_URL $LINUX_DPCPP_COMPONENTS_WEB
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_linux.sh dpc++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/cache_exclude_linux.sh

  #   # Delete the following if you don't want to save install logs
  #   - name: Saving install logs
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: InstallLogs_${{ github.job }}
  #       path: |
  #         bootstrapper*
  #         installer*
  #       retention-days: 7

  # build_linux_apt_cpp:
  #   runs-on: ubuntu-20.04
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: setup apt repo
  #     run: .github/workflows/intel-scripts/setup_apt_repo_linux.sh
  #   - name: collect versioned dependencies of apt packages
  #     run: .github/workflows/intel-scripts/apt_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         /opt/intel/oneapi/compiler
  #       key: install-${{ env.LINUX_CPP_COMPONENTS }}-${{ hashFiles('**/depends.txt') }}-compiler-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_linux_apt.sh $LINUX_CPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_linux.sh c++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/cache_exclude_linux.sh

  # build_linux_apt_dpcpp:
  #   runs-on: ubuntu-20.04
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: setup apt repo
  #     run: .github/workflows/intel-scripts/setup_apt_repo_linux.sh
  #   - name: collect versioned dependencies of apt packages
  #     run: .github/workflows/intel-scripts/apt_depends.sh $LINUX_DPCPP_COMPONENTS | tee depends.txt
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         /opt/intel/oneapi/compiler
  #         /opt/intel/oneapi/tbb
  #       key: install-${{ env.LINUX_DPCPP_COMPONENTS }}-${{ hashFiles('**/depends.txt') }}-compiler-tbb-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_linux_apt.sh $LINUX_DPCPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_linux.sh dpc++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/cache_exclude_linux.sh

  # build_linux_dnf_cpp:
  #   runs-on: ubuntu-20.04
  #   container: fedora
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: install prerequisites
  #     run: .github/workflows/intel-scripts/install_prerequisites_linux_dnf.sh
  #   - name: setup yum/dnf repo
  #     run: .github/workflows/intel-scripts/setup_yum_dnf_repo_linux.sh
  #   - name: collect versioned dependencies of dnf packages
  #     run: .github/workflows/intel-scripts/dnf_depends.sh $LINUX_CPP_COMPONENTS | tee depends.txt
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         /opt/intel/oneapi/compiler
  #       key: install-${{ env.LINUX_CPP_COMPONENTS }}-${{ hashFiles('**/depends.txt') }}-compiler-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_linux_dnf.sh $LINUX_CPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_linux.sh c++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/cache_exclude_linux.sh

  # build_linux_dnf_dpcpp:
  #   runs-on: ubuntu-20.04
  #   container: fedora
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: install prerequisites
  #     run: .github/workflows/intel-scripts/install_prerequisites_linux_dnf.sh
  #   - name: setup yum/dnf repo
  #     run: .github/workflows/intel-scripts/setup_yum_dnf_repo_linux.sh
  #   - name: collect versioned dependencies of dnf packages
  #     run: .github/workflows/intel-scripts/dnf_depends.sh $LINUX_DPCPP_COMPONENTS | tee depends.txt
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: |
  #         /opt/intel/oneapi/compiler
  #         /opt/intel/oneapi/tbb
  #       key: install-${{ env.LINUX_DPCPP_COMPONENTS }}-${{ hashFiles('**/depends.txt') }}-compiler-tbb-${{ hashFiles('**/.github/workflows/intel-scripts/cache_exclude_linux.sh') }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_linux_dnf.sh $LINUX_DPCPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_linux.sh dpc++
  #   - name: exclude unused files from cache
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/cache_exclude_linux.sh

  # build_macos_cpp:
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: prepare for cache restore
  #     run: |
  #       sudo mkdir -p /opt/intel
  #       sudo chown $USER /opt/intel
  #   - name: cache install
  #     id: cache-install
  #     uses: actions/cache@v2
  #     with:
  #       path: /opt/intel/oneapi
  #       key: install-${{ env.MACOS_HPCKIT_URL }}-${{ env.MACOS_CPP_COMPONENTS }}
  #   - name: install
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     run: .github/workflows/intel-scripts/install_macos.sh $MACOS_HPCKIT_URL $MACOS_CPP_COMPONENTS
  #   - name: build
  #     run: .github/workflows/intel-scripts/build_macos.sh c++

  #   # Delete the following if you don't want to save install logs
  #   - name: Saving install logs
  #     if: steps.cache-install.outputs.cache-hit != 'true'
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: InstallLogs_${{ github.job }}
  #       path: |
  #         bootstrapper*
  #         installer*
  #       retention-days: 7
